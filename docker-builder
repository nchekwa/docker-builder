#!/bin/bash
DB_VERSION="0.21.0"
DB_VERSION_DATE="2023-11-24"


############################################################
# Variables                                                #
############################################################
if [ -f build.env ]; then
    export $(cat build.env | xargs)
    # env $(cat .env|xargs) CMD
    # export "$(grep -vE "^(#.*|\s*)$" .env)"
    echo "***"
    echo "Builder: ${BUILD_NAME}:${BUILD_VERSION}"
else
    echo "*** ERROR: Missing build.env file where we need BUILD_NAME and BUILD_VERSION"
    echo "*** use commands to create basic file:"
    echo "echo 'BUILD_NAME=\"easyrsa\"' > build.env"
    echo "echo 'BUILD_VERSION=\"1.0\"' >> build.env"
    exit
fi


############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "***"
   echo "*** Built docker container based on Docerfile and predefined variables"
   echo "***"
   echo "*** Syntax: $0  [-f|v|h|s|S]"
   echo "    options:"
   echo "      -f     Force build without prompting, even if an identical image already exists in the repository."
   echo "      -s     Save image to tar.gz file."
   echo "      -d     If file './docker-compose.yml' exist - try to restart service '${BUILD_NAME}'"
   echo "      -v     Print software version and exit."
   echo "      -h     Print this Help."
   echo
}
############################################################
# Functions                                                #
############################################################
Version()
{
   echo "$0 - $DB_VERSION [$DB_VERSION_DATE]"
}
SaveDockerFile()
{
    echo "Writing local tar.gz file - please wait..."
    echo ""
    docker save ${BUILD_NAME}:${BUILD_VERSION/\~/-} | gzip > ${BUILD_NAME}_${BUILD_VERSION/\~/-}.tar.gz
    echo "Files:"
    ls -lah | grep ${BUILD_NAME} | grep tar.gz

    if [ -f "/usr/bin/md5sum" ]; then
        /usr/bin/md5sum ${BUILD_NAME}_${BUILD_VERSION/\~/-}.tar.gz > ${BUILD_NAME}_${BUILD_VERSION/\~/-}.tar.gz.md5
        MD5=$(md5sum ${BUILD_NAME}_${BUILD_VERSION/\~/-}.tar.gz)
        echo "MD5: ${MD5}"
        echo "*** Check MD5 sum by command: md5sum -c ${BUILD_NAME}_${BUILD_VERSION/\~/-}.tar.gz.md5"
        echo ""
    fi

    echo "*** You can load this file to repo by 'docker load' command"
    echo "*** ie.# docker load -i <path to image file>"
    echo "***     docker load options:"
    echo "***        -i, --input string   Read from the tar archive file, instead of STDIN"
    echo "***                             (even if compressed with gzip, bzip2, or xz)"
    echo "***        -q, --quiet          Suppress the load output"
    echo ""

}

# Specifying the optstring
# https://www.computerhope.com/unix/bash/getopts.htm
while getopts ":fhvdsS" option; do
   case $option in
        h)
            Help
            exit;;
        v)
            Version
            exit;;
        f)
            FORCE_BUILD="y"
            ;;
        s)
            FORCE_SAVE_TAR_GZ="y"
            ;;
        d)
            FORCE_DOCKER_COMPOSE_RESTART="y"
            ;;
        \?)
            echo "Error: Invalid option"
            exit;;
   esac
done

#shift $((OPTIND-1))  #This tells getopts to move on to the next argument.
############################################################
############################################################
# Main program                                             #
############################################################
############################################################

if [ -d "./app" ]; then
    echo "*** Found Python APP folder - clean Python Cache folders."
    find ./app | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
fi



if [[ "$(docker images -q ${BUILD_NAME}:${BUILD_VERSION/\~/-} 2> /dev/null)" != "" ]]; then
    if [ "$FORCE_BUILD" = "y" ]; then
        echo "*** FORCE_BUILD==YES: ${BUILD_NAME}:${BUILD_VERSION/\~/-} exist in docker repository - will be overwritten"
    else
        while true; do
            read -p "${BUILD_NAME}:${BUILD_VERSION/\~/-} exist in the docker repository - do you want to remove it? [y/n]: " answer
            case ${answer:0:1} in
                y|Y)
                    docker rmi ${BUILD_NAME}:${BUILD_VERSION/\~/-}
                    echo ""
                    echo "DONE: Docker Remove Image - ${BUILD_NAME}:${BUILD_VERSION/\~/-}"
                    echo ""
                    break;;
                n|N)
                    echo "ERROR: You can't build a new image when an image with the same tag exists in the repository !!!"
                    echo "All Done."
                    exit;;
                *) echo "Please answer yes or no [y/n].";;
            esac
        done
    fi
fi

echo "Docker build: ${BUILD_NAME}:${BUILD_VERSION/\~/-}"
docker build --build-arg VERSION=${BUILD_VERSION} -t ${BUILD_NAME}:${BUILD_VERSION/\~/-} .
echo ""
echo "Build Completed."
docker images | grep -e ${BUILD_NAME} -e REPOSITORY
echo ""

# Option -s
if [ "$FORCE_SAVE_TAR_GZ" = "y" ] ; then
    SaveDockerFile
fi

# Option -d
if [ "$FORCE_DOCKER_COMPOSE_RESTART" = "y" ] && [ -f "./docker-compose.yml" ]; then
    echo "*** File ./docker-compose.yml exist - will try to replace service by the new image."
    docker-compose stop ${BUILD_NAME}
    docker-compose rm -f ${BUILD_NAME}
    docker-compose up -d ${BUILD_NAME}
fi

echo ""
echo "All done!"
